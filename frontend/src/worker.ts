console.log('Worker.ts –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è');

import * as duckdb from '@duckdb/duckdb-wasm';
import { tableToIPC } from 'apache-arrow';
import * as XLSX from 'xlsx';
import { openDB, type IDBPDatabase } from 'idb';

console.log('–ò–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤–∫–ª—é—á–∞—è SheetJS –∏ idb), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DuckDB...');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ CDN
import mainWasm from '@duckdb/duckdb-wasm/dist/duckdb-eh.wasm?url';
import mainWorker from '@duckdb/duckdb-wasm/dist/duckdb-browser-eh.worker.js?url';

const localBundle = {
  mainModule: mainWasm,
  mainWorker: mainWorker,
  pthreadWorker: null
};

console.log('Local bundle:', localBundle);

// ‚ë° —Å–æ–∑–¥–∞—ë–º Worker + Logger
const dbWorker = new Worker(localBundle.mainWorker!, { type: 'module' });
console.log('DuckDB Worker —Å–æ–∑–¥–∞–Ω');

const logger = new duckdb.ConsoleLogger();
const db = new duckdb.AsyncDuckDB(logger, dbWorker);
console.log('AsyncDuckDB —Å–æ–∑–¥–∞–Ω');

// ‚ë¢ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è wasm-–º–æ–¥—É–ª—è
console.log('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é WASM...');
await db.instantiate(localBundle.mainModule, localBundle.pthreadWorker);
console.log('WASM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');

// === –°–ò–°–¢–ï–ú–ê –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–ò ===
let idbConnection: IDBPDatabase | null = null;
let isDirty = false;
let autoSaveInterval: NodeJS.Timeout | null = null;

// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
async function initPersistence() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...');
  
  try {
    idbConnection = await openDB('ia-db', 1, {
      upgrade(db) {
        console.log('–°–æ–∑–¥–∞–Ω–∏–µ object store –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏');
        db.createObjectStore('files');
      }
    });
    console.log('‚úÖ IndexedDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É
    await loadPersistedDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    startAutoSave();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:', error);
  }
}

// 2. –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–≤–æ—Ç—ã
async function estimateStorageQuota() {
  try {
    const estimate = await navigator.storage.estimate();
    const quota = estimate.quota || 0;
    const usage = estimate.usage || 0;
    
    console.log(`üìä Storage quota: ${(quota / 1024 / 1024 / 1024).toFixed(2)} GB`);
    console.log(`üìä Storage usage: ${(usage / 1024 / 1024).toFixed(2)} MB`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä DuckDB –±–∞–∑—ã
    let dbSizeMB = 0;
    try {
      const conn = await db.connect();
      const sizeRes = await conn.query(`
        SELECT count(*) AS rows,
               COALESCE(SUM(estimated_size), 0)/1024/1024 AS mb
        FROM duckdb_columns()
      `);
      const sizeData = sizeRes.toArray()[0] as any;
      dbSizeMB = sizeData?.mb || 0;
      await conn.close();
      
      console.log(`üìä DuckDB size: ${dbSizeMB.toFixed(2)} MB`);
    } catch (e) {
      console.log('üìä –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä DuckDB:', e);
    }
    
    const availableGB = (quota - usage) / 1024 / 1024 / 1024;
    const needsOPFS = dbSizeMB > 500 || availableGB < 1; // > 500MB –∏–ª–∏ < 1GB —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    
    return {
      quota,
      usage,
      dbSizeMB,
      availableGB,
      needsOPFS
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–≤–æ—Ç—ã:', error);
    return { quota: 0, usage: 0, dbSizeMB: 0, availableGB: 0, needsOPFS: true };
  }
}

// 3. –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –≤ Uint8Array
async function exportDatabase(): Promise<Uint8Array | null> {
  try {
    console.log('üîÑ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ SQL –¥–∞–º–ø...');
    const conn = await db.connect();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesRes = await conn.query("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'");
    const tables = tablesRes.toArray() as any[];
    
    if (tables.length === 0) {
      console.log('üìä –ù–µ—Ç —Ç–∞–±–ª–∏—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      await conn.close();
      return null;
    }
    
    let sqlDump = '-- DuckDB Database Export\n';
    sqlDump += '-- Created: ' + new Date().toISOString() + '\n\n';
    
    for (const table of tables) {
      const tableName = table.name;
      console.log(`üìã –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
      const schemaRes = await conn.query(`SELECT sql FROM sqlite_master WHERE name='${tableName}'`);
      const schema = schemaRes.toArray()[0] as any;
      sqlDump += `-- Table: ${tableName}\n`;
      sqlDump += schema.sql + ';\n\n';
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataRes = await conn.query(`SELECT * FROM "${tableName}" LIMIT 100000`); // –õ–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const rows = dataRes.toArray();
      
      if (rows.length > 0) {
        const columns = Object.keys(rows[0]);
        sqlDump += `-- Data for table: ${tableName}\n`;
        sqlDump += `INSERT INTO "${tableName}" ("${columns.join('", "')}") VALUES\n`;
        
        const valueRows = rows.map(row => {
          const values = columns.map(col => {
            const val = row[col];
            if (val === null || val === undefined) return 'NULL';
            if (typeof val === 'string') return `'${val.replace(/'/g, "''")}'`;
            if (typeof val === 'boolean') return val ? 'TRUE' : 'FALSE';
            return String(val);
          });
          return `  (${values.join(', ')})`;
        });
        
        sqlDump += valueRows.join(',\n') + ';\n\n';
        console.log(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –∏–∑ ${tableName}`);
      }
    }
    
    await conn.close();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SQL –≤ Uint8Array
    const encoder = new TextEncoder();
    const dbFile = encoder.encode(sqlDump);
    
    console.log(`‚úÖ SQL –¥–∞–º–ø —Å–æ–∑–¥–∞–Ω: ${(dbFile.length / 1024 / 1024).toFixed(2)} MB`);
    return dbFile;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã:', error);
    return null;
  }
}

// 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB
async function saveToIndexedDB(dbFile: Uint8Array): Promise<boolean> {
  if (!idbConnection) return false;
  
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ IndexedDB...');
    await idbConnection.put('files', dbFile, 'duckdb.bin');
    console.log('‚úÖ –ë–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ IndexedDB');
    return true;
  } catch (error) {
    if (error instanceof Error && error.name === 'QuotaExceededError') {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ IndexedDB, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ OPFS');
      return false;
    }
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ IndexedDB:', error);
    return false;
  }
}

// 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ OPFS (fallback)
async function saveToOPFS(dbFile: Uint8Array): Promise<boolean> {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ OPFS...');
    
    if (!navigator.storage?.getDirectory) {
      console.warn('‚ö†Ô∏è OPFS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return false;
    }
    
    const dir = await navigator.storage.getDirectory();
    const file = await dir.getFileHandle('duckdb.bin', { create: true });
    const writable = await file.createWritable();
    await writable.write(dbFile);
    await writable.close();
    
    console.log('‚úÖ –ë–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ OPFS');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ OPFS:', error);
    return false;
  }
}

// 6. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ IndexedDB
async function loadFromIndexedDB(): Promise<Uint8Array | null> {
  if (!idbConnection) return null;
  
  try {
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ IndexedDB...');
    const dbFile = await idbConnection.get('files', 'duckdb.bin');
    if (dbFile && dbFile instanceof Uint8Array) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
      if (dbFile.length === 0) {
        console.log('‚ö†Ô∏è –§–∞–π–ª –≤ IndexedDB –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ');
        await idbConnection.delete('files', 'duckdb.bin');
        return null;
      }
      
      console.log(`‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ IndexedDB: ${(dbFile.length / 1024 / 1024).toFixed(2)} MB`);
      return dbFile;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ IndexedDB:', error);
    // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try {
      await idbConnection.delete('files', 'duckdb.bin');
      console.log('üßπ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ IndexedDB');
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', e);
    }
  }
  return null;
}

// 7. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ OPFS
async function loadFromOPFS(): Promise<Uint8Array | null> {
  try {
    console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ OPFS...');
    
    if (!navigator.storage?.getDirectory) {
      return null;
    }
    
    const dir = await navigator.storage.getDirectory();
    const file = await dir.getFileHandle('duckdb.bin');
    const fileData = await file.getFile();
    const buffer = await fileData.arrayBuffer();
    const dbFile = new Uint8Array(buffer);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    if (dbFile.length === 0) {
      console.log('‚ö†Ô∏è –§–∞–π–ª –≤ OPFS –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ');
      await dir.removeEntry('duckdb.bin');
      return null;
    }
    
    console.log(`‚úÖ –ë–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ OPFS: ${(dbFile.length / 1024 / 1024).toFixed(2)} MB`);
    return dbFile;
  } catch (error) {
    console.log('üìÇ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ OPFS (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)');
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
async function clearCorruptedFiles() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  // –û—á–∏—â–∞–µ–º IndexedDB
  if (idbConnection) {
    try {
      await idbConnection.delete('files', 'duckdb.bin');
      console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ IndexedDB');
    } catch (e) {
      console.log('IndexedDB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω');
    }
  }
  
  // –û—á–∏—â–∞–µ–º OPFS
  try {
    if (navigator.storage?.getDirectory) {
      const dir = await navigator.storage.getDirectory();
      await dir.removeEntry('duckdb.bin');
      console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ OPFS');
    }
  } catch (e) {
    console.log('OPFS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω');
  }
}

// 8. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadPersistedDatabase() {
  console.log('üîç –ü–æ–∏—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º IndexedDB
  let dbFile = await loadFromIndexedDB();
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º OPFS
  if (!dbFile) {
    dbFile = await loadFromOPFS();
  }
  
  if (dbFile) {
    try {
      console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π DuckDB —Ñ–∞–π–ª
      if (dbFile.length < 100) {
        console.log('‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–π –±–∞–∑—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ SQL –¥–∞–º–ø –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª DuckDB
      const decoder = new TextDecoder();
      const fileStart = decoder.decode(dbFile.slice(0, 100));
      
      if (fileStart.includes('-- DuckDB Database Export') || fileStart.includes('CREATE TABLE')) {
        console.log('üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω SQL –¥–∞–º–ø, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        
        const conn = await db.connect();
        try {
          const sqlContent = decoder.decode(dbFile);
          
          // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
          const sqlCommands = sqlContent
            .split('\n')
            .filter(line => line.trim() && !line.trim().startsWith('--'))
            .join('\n')
            .split(';')
            .filter(cmd => cmd.trim());
          
          for (const command of sqlCommands) {
            const trimmedCommand = command.trim();
            if (trimmedCommand) {
              try {
                await conn.query(trimmedCommand);
              } catch (cmdError) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥—ã:', cmdError);
              }
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ 't'
          const tablesRes = await conn.query("SELECT name FROM sqlite_master WHERE type='table' AND name='t'");
          const tables = tablesRes.toArray();
          
          if (tables.length > 0) {
            const rowsRes = await conn.query("SELECT COUNT(*) AS cnt FROM t");
            const rows = rowsRes.getChild(0)?.get(0) ?? 0;
            
            console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ 't' —Å ${rows} —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–∑ SQL –¥–∞–º–ø–∞`);
            tableReady = true;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            self.postMessage({ 
              restored: true, 
              rows, 
              message: `–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${rows} —Å—Ç—Ä–æ–∫`
            });
          }
          
        } catch (sqlError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –¥–∞–º–ø–∞:', sqlError);
        } finally {
          await conn.close();
        }
        
      } else {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª DuckDB, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å...');
        
        await db.registerFileBuffer('persist.duckdb', dbFile);
        
        const conn = await db.connect();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try {
          await conn.query("ATTACH 'persist.duckdb' AS persisted");
          console.log('‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑–µ
          const tablesRes = await conn.query("SELECT name FROM persisted.sqlite_master WHERE type='table'");
          const tables = tablesRes.toArray();
          
          if (tables.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑–µ:', tables.map((t: any) => t.name));
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ 't', –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É
            if (tables.some((t: any) => t.name === 't')) {
              await conn.query("CREATE OR REPLACE TABLE t AS SELECT * FROM persisted.t");
              const rowsRes = await conn.query("SELECT COUNT(*) AS cnt FROM t");
              const rows = rowsRes.getChild(0)?.get(0) ?? 0;
              
              console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ 't' —Å ${rows} —Å—Ç—Ä–æ–∫–∞–º–∏`);
              tableReady = true;
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
              self.postMessage({ 
                restored: true, 
                rows, 
                message: `–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${rows} —Å—Ç—Ä–æ–∫`
              });
            }
          }
          
        } catch (attachError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã:', attachError);
          
          // –ï—Å–ª–∏ –±–∞–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è, –æ—á–∏—â–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          console.log('üßπ –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â...');
          await clearCorruptedFiles();
        } finally {
          await conn.close();
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –±–∞–∑—ã:', error);
    }
  } else {
    console.log('üìÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –±–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞');
  }
}

// 9. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async function persistDatabase() {
  if (!isDirty) {
    console.log('üìä –ë–∞–∑–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    return;
  }
  
  console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  const dbFile = await exportDatabase();
  if (!dbFile) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É');
    return;
  }
  
  const storage = await estimateStorageQuota();
  
  let saved = false;
  
  // –ï—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–±–æ–ª—å—à–∞—è –∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
  if (!storage.needsOPFS) {
    saved = await saveToIndexedDB(dbFile);
  }
  
  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ IndexedDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º OPFS
  if (!saved) {
    saved = await saveToOPFS(dbFile);
  }
  
  if (saved) {
    isDirty = false;
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    self.postMessage({ 
      saved: true, 
      message: '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ'
    });
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  }
}

// 10. –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
function startAutoSave() {
  if (autoSaveInterval) {
    clearInterval(autoSaveInterval);
  }
  
  autoSaveInterval = setInterval(async () => {
    if (isDirty && tableReady) {
      await persistDatabase();
    }
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥
  
  console.log('üîÑ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫—É–Ω–¥)');
}

// 11. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–≥—Ä—É–∑–∫–æ–π
self.addEventListener('beforeunload', async () => {
  if (isDirty) {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–≥—Ä—É–∑–∫–æ–π...');
    await persistDatabase();
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
await initPersistence();

let tableReady = false;

self.onmessage = (e: MessageEvent<ArrayBuffer | { sql: string } | { fileData: ArrayBuffer, fileName: string } | { action: string }>) => {
  console.log('Worker –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', e.data);
  
  if (e.data instanceof ArrayBuffer) {
    console.log('–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), —Ä–∞–∑–º–µ—Ä:', e.data.byteLength);
    importFile('data', new Uint8Array(e.data));
  } else if ('fileData' in e.data) {
    console.log(`–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${e.data.fileName}, —Ä–∞–∑–º–µ—Ä: ${e.data.fileData.byteLength}`);
    const fileName = e.data.fileName;
    const baseName = fileName.replace(/\.[^/.]+$/, ""); // —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    importFileByName(baseName, fileName, new Uint8Array(e.data.fileData));
  } else if ('action' in e.data) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    if (e.data.action === 'save') {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      persistDatabase();
    } else if (e.data.action === 'getStorageInfo') {
      console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
      estimateStorageQuota().then(info => {
        self.postMessage({ storageInfo: info });
      });
    }
  } else if (tableReady && 'sql' in e.data) {
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL:', e.data.sql);
    runSQL(e.data.sql);
  }
};

async function importFileByName(baseName: string, fileName: string, buf: Uint8Array) {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${fileName}, —Ä–∞–∑–º–µ—Ä: ${buf.length} –±–∞–π—Ç`);
  
  try {
    const lowerName = fileName.toLowerCase();
    
    if (lowerName.endsWith('.xlsx')) {
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: Excel (.xlsx)');
      await importExcel(fileName, buf);
    } else if (lowerName.endsWith('.parquet')) {
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: Parquet');
      await importParquet(fileName, buf);
    } else {
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: CSV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
      await importCSV(fileName, buf);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞:', error);
    self.postMessage({ error: error instanceof Error ? error.message : String(error) });
  }
}

async function importFile(baseName: string, buf: Uint8Array) {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞: ${baseName}, —Ä–∞–∑–º–µ—Ä: ${buf.length} –±–∞–π—Ç`);
  
  try {
    // –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ –º–∞–≥–∏—á–µ—Å–∫–∏–º –±–∞–π—Ç–∞–º
    const isParquet = buf.length > 4 && 
      buf[0] === 0x50 && buf[1] === 0x41 && buf[2] === 0x52 && buf[3] === 0x31; // "PAR1"
    
    if (isParquet) {
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: Parquet');
      await importParquet(baseName + '.parquet', buf);
    } else {
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: CSV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
      await importCSV(baseName + '.csv', buf);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞:', error);
    self.postMessage({ error: error instanceof Error ? error.message : String(error) });
  }
}

async function importCSV(name: string, buf: Uint8Array) {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç CSV: ${name}, —Ä–∞–∑–º–µ—Ä: ${buf.length} –±–∞–π—Ç`);
  
  try {
    await db.registerFileBuffer(name, buf);
    console.log('CSV —Ñ–∞–π–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DuckDB');
    
    const conn = await db.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–æ–∑–¥–∞–Ω–æ');
    
    await conn.query(`
        CREATE OR REPLACE TABLE t 
        AS SELECT * FROM read_csv_auto('${name}', header=true)
    `);
    console.log('–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ CSV');
    
    const rowsRes = await conn.query('SELECT COUNT(*) AS cnt FROM t');
    console.log('–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:', rowsRes);
    
    const rows = rowsRes.getChild(0)?.get(0) ?? 0;
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ CSV:', rows);

    tableReady = true;
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ CSV');
    self.postMessage({ imported: true, rows, type: 'CSV' });
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    isDirty = true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ CSV:', error);
    self.postMessage({ error: error instanceof Error ? error.message : String(error) });
  }
}

async function importParquet(name: string, buf: Uint8Array) {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç Parquet: ${name}, —Ä–∞–∑–º–µ—Ä: ${buf.length} –±–∞–π—Ç`);
  
  try {
    await db.registerFileBuffer(name, buf);
    console.log('Parquet —Ñ–∞–π–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ DuckDB');
    
    const conn = await db.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–æ–∑–¥–∞–Ω–æ');
    
    await conn.query(`
        CREATE OR REPLACE TABLE t AS
        SELECT * FROM '${name}'
    `);
    console.log('–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ Parquet');
    
    const rowsRes = await conn.query('SELECT COUNT(*) AS cnt FROM t');
    console.log('–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:', rowsRes);
    
    const rows = rowsRes.getChild(0)?.get(0) ?? 0;
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ Parquet:', rows);

    tableReady = true;
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ Parquet');
    self.postMessage({ imported: true, rows, type: 'Parquet' });
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    isDirty = true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Parquet:', error);
    self.postMessage({ error: error instanceof Error ? error.message : String(error) });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
function makeUniqueHeaders(rawHeaders: any[]): string[] {
  const headers: string[] = [];
  const headerCounts = new Map<string, number>();
  
  for (let i = 0; i < rawHeaders.length; i++) {
    // –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞—Ç–∏–Ω–∏—Ü—É, –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    let cleanHeader = String(rawHeaders[i] || `column_${i + 1}`)
      .replace(/[^a-zA-Z0-9_–∞-—è—ë]/gi, '_') || `column_${i + 1}`;
    
    // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    cleanHeader = cleanHeader
      .replace(/_+/g, '_')  // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ _ ‚Üí –æ–¥–∏–Ω–æ—á–Ω—ã–π _
      .replace(/^_+|_+$/g, '') || `column_${i + 1}`; // —É–±–∏—Ä–∞–µ–º _ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (headerCounts.has(cleanHeader)) {
      const count = headerCounts.get(cleanHeader)! + 1;
      headerCounts.set(cleanHeader, count);
      cleanHeader = `${cleanHeader}_${count}`;
    } else {
      headerCounts.set(cleanHeader, 1);
    }
    
    headers.push(cleanHeader);
  }
  
  return headers;
}

async function importExcel(name: string, buf: Uint8Array) {
  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç Excel —á–µ—Ä–µ–∑ SheetJS: ${name}, —Ä–∞–∑–º–µ—Ä: ${buf.length} –±–∞–π—Ç`);
  
  try {
    // –®–∞–≥ 1: –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ SheetJS
    console.log('1. –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SheetJS...');
    const workbook = XLSX.read(buf, { type: 'array', cellText: false, cellDates: true });
    console.log('Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –õ–∏—Å—Ç—ã:', workbook.SheetNames);
    
    if (workbook.SheetNames.length === 0) {
      throw new Error('Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤');
    }
    
    const conn = await db.connect();
    let totalRows = 0;
    let processedSheets = 0;
    
    // –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
    for (const sheetName of workbook.SheetNames) {
      console.log(`2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: "${sheetName}"`);
      
      const worksheet = workbook.Sheets[sheetName];
      if (!worksheet) continue;
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç –≤ JSON —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
        header: 1,  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤
        raw: false, // –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        defval: ''  // –ü—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –∫–∞–∫ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      });
      
      if (jsonData.length === 0) {
        console.log(`–õ–∏—Å—Ç "${sheetName}" –ø—É—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const rawHeaders = jsonData[0] as any[];
      const headers = makeUniqueHeaders(rawHeaders);
      const dataRows = jsonData.slice(1) as any[][];
      
      if (dataRows.length === 0) {
        console.log(`–õ–∏—Å—Ç "${sheetName}" —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      console.log(`–õ–∏—Å—Ç "${sheetName}": ${headers.length} –∫–æ–ª–æ–Ω–æ–∫, ${dataRows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
      
      // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
      const tableName = processedSheets === 0 ? 't' : `sheet_${sheetName.replace(/[^a-zA-Z0-9]/g, '_')}`;
      
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å VARCHAR –∫–æ–ª–æ–Ω–∫–∞–º–∏
      const columnDefs = headers.map(h => `"${h}" VARCHAR`).join(', ');
      await conn.query(`CREATE OR REPLACE TABLE ${tableName} (${columnDefs})`);
      
      // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞–º–∏ –ø–æ 1000 —Å—Ç—Ä–æ–∫
      const batchSize = 1000;
      for (let i = 0; i < dataRows.length; i += batchSize) {
        const batch = dataRows.slice(i, i + batchSize);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º VALUES –¥–ª—è INSERT
        const valueStrings = batch.map(row => {
          const values = headers.map((_, idx) => {
            const value = row[idx];
            if (value === undefined || value === null || value === '') {
              return 'NULL';
            }
            return `'${String(value).replace(/'/g, "''")}'`;
          });
          return `(${values.join(', ')})`;
        });
        
        if (valueStrings.length > 0) {
          const sql = `INSERT INTO ${tableName} VALUES ${valueStrings.join(', ')}`;
          await conn.query(sql);
        }
      }
      
      if (processedSheets === 0) {
        totalRows = dataRows.length;
      }
      
      console.log(`–í—Å—Ç–∞–≤–ª–µ–Ω–æ ${dataRows.length} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É ${tableName}`);
      processedSheets++;
    }
    
    await conn.close();
    
    if (totalRows === 0) {
      throw new Error('Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    }
    
    tableReady = true;
    console.log(`Excel –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${processedSheets} –ª–∏—Å—Ç–æ–≤, ${totalRows} —Å—Ç—Ä–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ`);
    
    const message = processedSheets === 1 
      ? `Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${totalRows} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.`
      : `Excel —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${processedSheets} –ª–∏—Å—Ç–æ–≤, ${totalRows} —Å—Ç—Ä–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ 't'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SHOW TABLES –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.`;
    
    self.postMessage({ 
      imported: true, 
      rows: totalRows, 
      type: `Excel (.xlsx) - ${processedSheets} –ª–∏—Å—Ç–æ–≤`,
      message: message
    });
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    isDirty = true;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ Excel —á–µ—Ä–µ–∑ SheetJS:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    self.postMessage({ 
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: ${errorMessage}` 
    });
  }
}

async function runSQL(sql: string) {
  console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å:', sql);
  
  try {
    const conn = await db.connect();
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è SQL —Å–æ–∑–¥–∞–Ω–æ');
    
    // –û—á–∏—â–∞–µ–º SQL –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–æ—á–µ–∫ —Å –∑–∞–ø—è—Ç–æ–π
    const cleanSQL = sql.trim().replace(/;+$/, '');
    console.log('–û—á–∏—â–µ–Ω–Ω—ã–π SQL:', cleanSQL);
    
    const res = await conn.query(cleanSQL);
    console.log('SQL –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', res);
    
    // –û—Ç–º–µ—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–ª—è SQL –∫–æ–º–∞–Ω–¥ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const modifyingCommands = ['INSERT', 'UPDATE', 'DELETE', 'CREATE', 'ALTER', 'DROP'];
    if (modifyingCommands.some(cmd => cleanSQL.toUpperCase().trim().startsWith(cmd))) {
      isDirty = true;
      console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ SQL –∫–æ–º–∞–Ω–¥—ã');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if (res.numRows === 0) {
      console.log('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π');
      self.postMessage({ 
        result: tableToIPC(res), 
        rowCount: 0,
        message: '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π'
      }, { transfer: [tableToIPC(res).buffer] });
      return;
    }
    
    const ipc = tableToIPC(res);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –≤ IPC, —Ä–∞–∑–º–µ—Ä:', ipc.length, '—Å—Ç—Ä–æ–∫:', res.numRows);
    
    self.postMessage({ 
      result: ipc, 
      rowCount: res.numRows,
      message: `–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–µ–Ω–æ ${res.numRows} —Å—Ç—Ä–æ–∫.`
    }, { transfer: [ipc.buffer] });
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ main thread');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL:', error);
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É:', errorMessage);
    self.postMessage({ 
      error: errorMessage,
      sql: sql 
    });
  }
}