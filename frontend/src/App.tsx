import React, { useState, useRef } from 'react';
import { tableFromIPC } from 'apache-arrow';
import { AgGridReact } from 'ag-grid-react';
import { ModuleRegistry, AllCommunityModule } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import { VegaLite } from 'react-vega';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º AG Grid –º–æ–¥—É–ª–∏
ModuleRegistry.registerModules([AllCommunityModule]);

console.log('App.tsx –∑–∞–≥—Ä—É–∂–µ–Ω');

const w = new Worker(new URL('./worker.ts', import.meta.url), { type: 'module' });
console.log('Worker —Å–æ–∑–¥–∞–Ω:', w);

export default function App() {
  const [gridData, setGridData] = useState<any[]>([]);
  const [columnDefs, setColumnDefs] = useState<any[]>([]);
  const [sqlQuery, setSqlQuery] = useState('SELECT * FROM t LIMIT 20');
  const [isLoading, setIsLoading] = useState(false);
  const [fileImported, setFileImported] = useState(false);
  const [importStatus, setImportStatus] = useState('');
  const sqlInputRef = useRef<HTMLTextAreaElement>(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç worker
  w.onmessage = (e) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç worker:', e.data);
    
    if (e.data.error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç worker:', e.data.error);
      alert(`–û—à–∏–±–∫–∞: ${e.data.error}`);
      setIsLoading(false);
      return;
    }

    if (e.data.imported) {
      const fileType = e.data.type || '—Ñ–∞–π–ª';
      console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–æ–∫ –∏–∑ ${fileType}: ${e.data.rows}`);
      setImportStatus(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${e.data.rows} —Å—Ç—Ä–æ–∫ –∏–∑ ${fileType}`);
      setFileImported(true);
      setIsLoading(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
      executeSQL(sqlQuery);
    }
    
    if (e.data.result) {
      console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞, —Ä–∞–∑–º–µ—Ä:', e.data.result.length);
      const tbl = tableFromIPC(new Uint8Array(e.data.result));
      console.log('–¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞:', tbl);
      
      const data = tbl.toArray();
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è grid:', data);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      if (e.data.message) {
        setImportStatus(`üîç ${e.data.message}`);
      }
      
      if (data.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ag-Grid
        const columns = Object.keys(data[0]).map(field => ({
          field: field,
          sortable: true,
          filter: true,
          resizable: true
        }));
        
        setColumnDefs(columns);
        setGridData(data);
      } else {
        setColumnDefs([]);
        setGridData([]);
      }
      
      setIsLoading(false);
    }
  };

  w.onerror = (error) => {
    console.error('–û—à–∏–±–∫–∞ –≤ worker:', error);
    setIsLoading(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
  const executeSQL = (query: string) => {
    if (!fileImported) {
      alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å:', query);
    setIsLoading(true);
    w.postMessage({ sql: query });
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const handleFileUpload = async (ev: React.ChangeEvent<HTMLInputElement>) => {
    const f = ev.target.files?.[0];
    if (f) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 2GB (–º–∞–∫—Å–∏–º—É–º –¥–ª—è ArrayBuffer)
      const maxSize = 2 * 1024 * 1024 * 1024; // 2GB
      if (f.size > maxSize) {
        alert(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${Math.round(f.size / 1024 / 1024 / 1024 * 100) / 100}GB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2GB\n\n–î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 2GB —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n1. –†–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏\n2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DuckDB Desktop`);
        ev.target.value = ''; // –û—á–∏—â–∞–µ–º input
        return;
      }
      
      console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${f.name} (${f.size} –±–∞–π—Ç = ${Math.round(f.size / 1024 / 1024)}MB)`);
      setIsLoading(true);
      setImportStatus('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
      
      const buf = await f.arrayBuffer();
      w.postMessage({ 
        fileData: buf, 
        fileName: f.name 
      }, { transfer: [buf] });
    }
  };

  // –ë–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è Vega-Lite
  const getVegaSpec = () => {
    if (gridData.length === 0) return null;
    
    const firstRow = gridData[0];
    const fields = Object.keys(firstRow);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    const stringFields = fields.filter(f => typeof firstRow[f] === 'string');
    const numberFields = fields.filter(f => typeof firstRow[f] === 'number');
    
    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –ø–æ–ª—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    const xField = stringFields[0] || fields[0];
    const yField = numberFields[0] || fields[1] || fields[0];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const mark = (() => {
      if (numberFields.length >= 2) {
        return 'point' as const; // Scatter plot –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª—è
      } else if (stringFields.length === 0) {
        return 'line' as const; // Line chart –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è —á–∏—Å–ª–æ–≤—ã–µ
      }
      return 'bar' as const;
    })();
    
    return {
      $schema: 'https://vega.github.io/schema/vega-lite/v5.json',
      title: `–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: ${xField} vs ${yField}`,
      data: { values: gridData.slice(0, 200) }, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
      mark: mark,
      encoding: {
        x: { 
          field: xField, 
          type: typeof firstRow[xField] === 'number' ? 'quantitative' as const : 'nominal' as const,
          title: xField 
        },
        y: { 
          field: yField, 
          type: typeof firstRow[yField] === 'number' ? 'quantitative' as const : 'nominal' as const,
          title: yField,
          aggregate: typeof firstRow[yField] === 'number' && mark === 'bar' ? 'mean' as const : undefined
        },
        tooltip: [
          { field: xField, type: typeof firstRow[xField] === 'number' ? 'quantitative' as const : 'nominal' as const },
          { field: yField, type: typeof firstRow[yField] === 'number' ? 'quantitative' as const : 'nominal' as const }
        ]
      },
      width: 600,
      height: 350
    };
  };

  const vegaSpec = getVegaSpec();

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>
      <h1>ü¶Ü DuckDB Analytics Dashboard</h1>
      
      {/* –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
      <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
        <h3>üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h3>
        <input
          type="file"
          accept=".csv,.parquet,.xlsx"
          onChange={handleFileUpload}
          style={{ marginBottom: '10px' }}
        />
       
        {importStatus && (
          <div style={{ marginTop: '10px', fontWeight: 'bold' }}>
            {importStatus}
          </div>
        )}
      </div>

      {/* –°–µ–∫—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ */}
      {fileImported && (
        <div style={{ marginBottom: '20px', padding: '15px', border: '1px solid #ddd', borderRadius: '5px' }}>
          <h3>üîç SQL –ó–∞–ø—Ä–æ—Å—ã</h3>
          <div style={{ marginBottom: '10px' }}>
            <textarea
              ref={sqlInputRef}
              value={sqlQuery}
              onChange={(e) => setSqlQuery(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å..."
              style={{ 
                width: '100%', 
                height: '80px', 
                padding: '10px',
                fontFamily: 'monospace',
                fontSize: '14px'
              }}
            />
          </div>
          <button 
            onClick={() => executeSQL(sqlQuery)}
            disabled={isLoading}
            style={{
              padding: '10px 20px',
              backgroundColor: isLoading ? '#ccc' : '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '3px',
              cursor: isLoading ? 'not-allowed' : 'pointer'
            }}
          >
            {isLoading ? '‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : '‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
          </button>
          
          {/* –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
          <div style={{ marginTop: '10px' }}>
            <small>–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã: </small>
            {[
              'SELECT * FROM t LIMIT 10',
              'SELECT COUNT(*) as total FROM t',
              'SELECT * FROM t ORDER BY 1 DESC LIMIT 5'
            ].map((query, idx) => (
              <button
                key={idx}
                onClick={() => {
                  setSqlQuery(query);
                  executeSQL(query);
                }}
                style={{
                  margin: '2px',
                  padding: '5px 10px',
                  fontSize: '12px',
                  backgroundColor: '#f8f9fa',
                  border: '1px solid #dee2e6',
                  borderRadius: '3px',
                  cursor: 'pointer'
                }}
              >
                {query}
              </button>
            ))}
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
            {gridData.length > 0 && (
              <>
                <br/>
                <small style={{ color: '#666' }}>–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: </small>
                {[
                  'DESCRIBE t',
                  'SELECT DISTINCT * FROM t LIMIT 5',
                  'SHOW TABLES'
                ].map((query, idx) => (
                  <button
                    key={`analysis-${idx}`}
                    onClick={() => {
                      setSqlQuery(query);
                      executeSQL(query);
                    }}
                    style={{
                      margin: '2px',
                      padding: '5px 10px',
                      fontSize: '12px',
                      backgroundColor: '#e3f2fd',
                      border: '1px solid #90caf9',
                      borderRadius: '3px',
                      cursor: 'pointer'
                    }}
                  >
                    {query}
                  </button>
                ))}
              </>
            )}
          </div>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ */}
      {gridData.length > 0 && (
        <>
          {/* ag-Grid —Ç–∞–±–ª–∏—Ü–∞ */}
          <div style={{ marginBottom: '20px' }}>
            <h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ ({gridData.length} —Å—Ç—Ä–æ–∫)</h3>
            <div className="ag-theme-alpine" style={{ height: 400, width: '100%' }}>
              <AgGridReact
                rowData={gridData}
                columnDefs={columnDefs}
                defaultColDef={{
                  flex: 1,
                  minWidth: 100,
                  sortable: true,
                  filter: true,
                  resizable: true
                }}
                pagination={true}
                paginationPageSize={20}
                animateRows={true}
              />
            </div>
          </div>

          {/* Vega-Lite –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è */}
          {vegaSpec && (
            <div style={{ marginBottom: '20px' }}>
              <h3>üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è</h3>
              <div style={{ border: '1px solid #ddd', borderRadius: '5px', padding: '15px' }}>
                <VegaLite spec={vegaSpec} />
              </div>
            </div>
          )}
        </>
      )}

      {/* –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div style={{ 
          position: 'fixed', 
          top: '50%', 
          left: '50%', 
          transform: 'translate(-50%, -50%)',
          backgroundColor: 'rgba(0,0,0,0.8)',
          color: 'white',
          padding: '20px',
          borderRadius: '5px',
          zIndex: 1000
        }}>
          ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...
        </div>
      )}
    </div>
  );
}
