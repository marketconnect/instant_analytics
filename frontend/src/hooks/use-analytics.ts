import { useState, useCallback, useEffect } from 'react';
import { tableFromIPC } from 'apache-arrow';
import type { AnalyticsData, VizSettings, ImportStatus, ColumnDef } from '../types/analytics';
import { getDuckDBService } from '../services/duckdb-service';
import { useData } from '../contexts/DataContext';

const DEFAULT_VIZ_SETTINGS: VizSettings = {
  xField: '',
  yField: '',
  chartType: 'auto'
};

export const useAnalytics = () => {
  const [analyticsData, setAnalyticsData] = useState<AnalyticsData>({
    gridData: [],
    columnDefs: [],
    vizSettings: DEFAULT_VIZ_SETTINGS
  });
  
  const [sqlQuery, setSqlQuery] = useState('SELECT * FROM t LIMIT 20');
  const [isLoading, setIsLoading] = useState(false);
  const [fileImported, setFileImported] = useState(false);
  const [importStatus, setImportStatus] = useState<ImportStatus>({
    status: 'idle',
    message: ''
  });

  const duckDBService = getDuckDBService();
  const { currentDatabase } = useData();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('useAnalytics: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', currentDatabase);
    
    if (currentDatabase && currentDatabase.rowCount > 0) {
      console.log('useAnalytics: –Ω–∞–π–¥–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fileImported = true');
      setFileImported(true);
      setImportStatus({
        status: 'success',
        message: `‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã: ${currentDatabase.rowCount} —Å—Ç—Ä–æ–∫ (${currentDatabase.name})`,
        rows: currentDatabase.rowCount,
        type: currentDatabase.name
      });
    }
  }, [currentDatabase]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞
  const handleFileUpload = useCallback(async (file: File) => {
    const maxSize = 2 * 1024 * 1024 * 1024; // 2GB
    
    if (file.size > maxSize) {
      const sizeGB = Math.round(file.size / 1024 / 1024 / 1024 * 100) / 100;
      throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${sizeGB}GB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2GB`);
    }

    setIsLoading(true);
    setImportStatus({
      status: 'loading',
      message: '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...'
    });

    try {
      const buffer = await file.arrayBuffer();
      const result = await duckDBService.importFile(buffer, file.name);
      
      setImportStatus({
        status: 'success',
        message: `‚úÖ ${result.message}`,
        rows: result.rows,
        type: result.type
      });
      
      setFileImported(true);
      
    } catch (error) {
      console.error('Import error:', error);
      setImportStatus({
        status: 'error',
        message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      });
    } finally {
      setIsLoading(false);
    }
  }, [duckDBService]);

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
  const executeSQL = useCallback(async (query: string, checkFileImported = true) => {
    console.log('executeSQL –≤—ã–∑–≤–∞–Ω:', { query, checkFileImported, fileImported });
    
    if (checkFileImported && !fileImported) {
      console.log('executeSQL: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑-–∑–∞ !fileImported');
      throw new Error('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
    }

    setIsLoading(true);
    
    try {
      console.log('–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å:', query);
      const result = await duckDBService.executeSQLQuery(query);
      console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞:', result);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è ag-Grid
      const tbl = tableFromIPC(new Uint8Array(result.data));
      const data = tbl.toArray();
      console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –¥–ª—è ag-Grid:', data);
      
      setImportStatus({
        status: 'success',
        message: `üîç ${result.message} (${data.length} —Å—Ç—Ä–æ–∫)`
      });

      if (data.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è ag-Grid
        const columns: ColumnDef[] = Object.keys(data[0]).map(field => ({
          field: field,
          sortable: true,
          filter: true,
          resizable: true
        }));

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π setState
        setAnalyticsData(prev => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø—É—Å—Ç—ã–µ
          const newVizSettings = { ...prev.vizSettings };
          if (!newVizSettings.xField || !newVizSettings.yField) {
            const firstRow = data[0];
            const stringFields = Object.keys(firstRow).filter(f => typeof firstRow[f] === 'string');
            const numberFields = Object.keys(firstRow).filter(f => typeof firstRow[f] === 'number');
            
            newVizSettings.xField = stringFields[0] || Object.keys(firstRow)[0] || '';
            newVizSettings.yField = numberFields[0] || Object.keys(firstRow)[1] || Object.keys(firstRow)[0] || '';
          }

          return {
            gridData: data,
            columnDefs: columns,
            vizSettings: newVizSettings
          };
        });
      } else {
        setAnalyticsData(prev => ({
          ...prev,
          gridData: [],
          columnDefs: []
        }));
      }
      
    } catch (error) {
      console.error('SQL execution error:', error);
      setImportStatus({
        status: 'error',
        message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [fileImported, duckDBService]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞
  useEffect(() => {
    if (fileImported) {
      executeSQL('SELECT * FROM t LIMIT 20', false).catch(console.error);
    }
  }, [fileImported, executeSQL]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
  const updateVizSettings = useCallback((settings: Partial<VizSettings>) => {
    setAnalyticsData(prev => ({
      ...prev,
      vizSettings: { ...prev.vizSettings, ...settings }
    }));
  }, []);

  // –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const executeQuickQuery = useCallback(async (query: string) => {
    setSqlQuery(query);
    await executeSQL(query);
  }, [executeSQL]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  useEffect(() => {
    console.log('useAnalytics: –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç worker');
    
    const handleWorkerMessage = (data: any) => {
      console.log('useAnalytics: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç worker:', data);
      
      if (data.restored && data.rows > 0 && !fileImported) {
        console.log('useAnalytics: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', data);
        setFileImported(true);
        setImportStatus({
          status: 'success',
          message: `‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${data.rows} —Å—Ç—Ä–æ–∫`,
          rows: data.rows,
          type: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'
        });
        console.log('useAnalytics: fileImported —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true');
      }
    };
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç worker
    duckDBService.on('message', handleWorkerMessage);
    console.log('useAnalytics: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('useAnalytics: –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π worker');
      duckDBService.off('message', handleWorkerMessage);
    };
  }, [duckDBService, fileImported]);

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  const exportToExcel = useCallback(async (sql?: string, fileName?: string) => {
    const exportSQL = sql || sqlQuery;
    const exportFileName = fileName || 'export';
    
    if (!fileImported) {
      throw new Error('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö');
    }

    setIsLoading(true);
    
    try {
      console.log('–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel:', { exportSQL, exportFileName });
      const excelBuffer = await duckDBService.exportToExcel(exportSQL, exportFileName);
      
      // –°–æ–∑–¥–∞–µ–º blob –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([excelBuffer], { 
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
      });
      
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${exportFileName}.xlsx`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      setImportStatus({
        status: 'success',
        message: `üìä Excel —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω: ${exportFileName}.xlsx`
      });
      
    } catch (error) {
      console.error('Export error:', error);
      setImportStatus({
        status: 'error',
        message: `‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  }, [fileImported, duckDBService, sqlQuery]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    analyticsData,
    sqlQuery,
    setSqlQuery,
    isLoading,
    fileImported,
    importStatus,
    
    // –ú–µ—Ç–æ–¥—ã
    handleFileUpload,
    executeSQL,
    executeQuickQuery,
    updateVizSettings,
    exportToExcel,
  };
}; 