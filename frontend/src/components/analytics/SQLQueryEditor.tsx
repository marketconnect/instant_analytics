import React, { useState, useEffect } from 'react';
import styles from './SQLQueryEditor.module.css';

interface SQLQueryEditorProps {
  query: string;
  onQueryChange: (query: string) => void;
  onExecuteQuery: (query: string) => Promise<void>;
  isLoading: boolean;
  mode?: 'sql' | 'ai';
  onModeChange?: (mode: 'sql' | 'ai') => void;
}

const SQLQueryEditor: React.FC<SQLQueryEditorProps> = ({
  query,
  onQueryChange,
  onExecuteQuery,
  isLoading,
  mode = 'sql',
  onModeChange
}) => {
  const [sqlHistory, setSqlHistory] = useState<string[]>([]);
  const [showHistory, setShowHistory] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedHistory = localStorage.getItem('sqlQueryHistory');
    if (savedHistory) {
      try {
        setSqlHistory(JSON.parse(savedHistory));
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤:', e);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π SQL –∑–∞–ø—Ä–æ—Å
    if (mode === 'sql') {
      const lastSqlQuery = localStorage.getItem('lastSqlQuery');
      if (lastSqlQuery && !query) {
        onQueryChange(lastSqlQuery);
      }
    }
  }, [mode, onQueryChange, query]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π SQL –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (mode === 'sql' && query.trim()) {
      localStorage.setItem('lastSqlQuery', query);
    }
  }, [query, mode]);

  const addToHistory = (sqlQuery: string) => {
    if (!sqlQuery.trim() || mode !== 'sql') return;
    
    const newHistory = [sqlQuery, ...sqlHistory.filter(q => q !== sqlQuery)].slice(0, 10); // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
    setSqlHistory(newHistory);
    localStorage.setItem('sqlQueryHistory', JSON.stringify(newHistory));
  };

  const handleExecuteClick = async () => {
    try {
      if (mode === 'ai') {
        console.log('AI –ø—Ä–æ–º–ø—Ç:', query);
        alert('AI —Ä–µ–∂–∏–º –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.');
        return;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
      addToHistory(query);
      await onExecuteQuery(query);
    } catch (error) {
      console.error('Query execution error:', error);
    }
  };

  const selectFromHistory = (historicalQuery: string) => {
    onQueryChange(historicalQuery);
    setShowHistory(false);
  };

  const clearHistory = () => {
    setSqlHistory([]);
    localStorage.removeItem('sqlQueryHistory');
    setShowHistory(false);
  };

  // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
  const SQLIcon = () => (
    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5">
      <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
      <polyline points="14,2 14,8 20,8"/>
      <line x1="16" y1="13" x2="8" y2="13"/>
      <line x1="16" y1="17" x2="8" y2="17"/>
      <polyline points="10,9 9,9 8,9"/>
    </svg>
  );

  const AIIcon = () => (
    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5">
      <path d="M12 2L2 7l10 5 10-5-10-5z"/>
      <path d="M2 17l10 5 10-5"/>
      <path d="M2 12l10 5 10-5"/>
    </svg>
  );

  return (
    <div className={styles.card}>
      <h3 className={styles.cardTitle}>
        {mode === 'sql' ? 'SQL –ó–∞–ø—Ä–æ—Å—ã' : 'AI –ó–∞–ø—Ä–æ—Å—ã'}
      </h3>
      
      {/* Query Mode Selector –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className={styles.header}>
        <div className={styles.modeSelector}>
          <label className={`${styles.modeOption} ${mode === 'sql' ? styles.sql : styles.inactive}`}>
            <input
              type="radio"
              name="queryMode"
              value="sql"
              checked={mode === 'sql'}
              onChange={(e) => onModeChange?.(e.target.value as 'sql' | 'ai')}
              className={styles.modeOptionInput}
            />
            <SQLIcon />
            SQL –ó–∞–ø—Ä–æ—Å—ã
          </label>
          
          <label className={`${styles.modeOption} ${mode === 'ai' ? styles.ai : styles.inactive}`}>
            <input
              type="radio"
              name="queryMode"
              value="ai"
              checked={mode === 'ai'}
              onChange={(e) => onModeChange?.(e.target.value as 'sql' | 'ai')}
              className={styles.modeOptionInput}
            />
            <AIIcon />
            AI –ó–∞–ø—Ä–æ—Å—ã
          </label>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è */}
        {mode === 'sql' && (
          <div className={styles.historyContainer}>
            <button
              onClick={() => setShowHistory(!showHistory)}
              className={styles.historyButton}
            >
              –ò—Å—Ç–æ—Ä–∏—è {sqlHistory.length > 0 && `(${sqlHistory.length})`}
            </button>

            {showHistory && (
              <div className={styles.historyDropdown}>
                <div className={styles.historyHeader}>
                  <span className={styles.historyTitle}>
                    –ò—Å—Ç–æ—Ä–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
                  </span>
                  {sqlHistory.length > 0 && (
                    <button
                      onClick={clearHistory}
                      className={styles.clearButton}
                    >
                      –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                  )}
                </div>
                {sqlHistory.length === 0 ? (
                  <div className={styles.historyEmpty}>
                    –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
                  </div>
                ) : (
                  sqlHistory.map((historicalQuery, index) => (
                    <div
                      key={index}
                      onClick={() => selectFromHistory(historicalQuery)}
                      className={styles.historyItem}
                    >
                      {historicalQuery.length > 50 ? historicalQuery.substring(0, 50) + '...' : historicalQuery}
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Textarea –¥–ª—è –≤–≤–æ–¥–∞ */}
      <div className={styles.textareaContainer}>
        <textarea
          value={query}
          onChange={(e) => onQueryChange(e.target.value)}
          placeholder={mode === 'ai' 
            ? "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –¥–∞–Ω–Ω—ã—Ö... –ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫–∞–∂–∏ —Ç–æ–ø 10 –∑–∞–ø–∏—Å–µ–π –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º' –∏–ª–∏ '–ù–∞–π–¥–∏ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö'"
            : "–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å..."
          }
          disabled={isLoading}
          className={`${styles.textarea} ${mode === 'ai' ? styles.ai : styles.sql}`}
        />
      </div>
      
      <button 
        onClick={handleExecuteClick}
        disabled={isLoading || !query.trim()}
        className={`${styles.executeButton} ${isLoading || !query.trim() ? styles.disabled : styles.enabled}`}
      >
        {isLoading 
          ? (mode === 'ai' ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...') 
          : (mode === 'ai' ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å')
        }
      </button>
      
      {mode === 'ai' && (
        <div className={styles.aiHint}>
          üí° –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, –∏ AI –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        </div>
      )}
    </div>
  );
};

export default SQLQueryEditor; 